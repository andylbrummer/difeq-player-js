{"version":3,"sources":["demo.js","ParamController.js","solver.js","trace.js"],"names":[],"mappingslzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cotm-demo.js","sourcesContent":["/**\r\n * Created by andy on 11/16/14.\r\n */\r\n(function () {\r\nangular\r\n    .module('cmDemo', [])\r\n    .directive('cmDemo', function () {\r\n        var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\r\n        return {\r\n            scope: {\r\n                running: '=',\r\n                cmDemo: '&'\r\n            },\r\n            restrict: 'E',\r\n            requires: ['draw'],\r\n            transclude: false,\r\n            replace: true,\r\n            template: '<div class=\"demo-controls\">\\\r\n                            <button class=\"btn\" ng-click=\"running = true\" ng-show=\"!running\"><span class=\"glyphicon glyphicon-play\"></span></button>\\\r\n                            <button class=\"btn\" ng-click=\"running = false\" ng-show=\"running\"><span class=\"glyphicon glyphicon-pause\"></button>\\\r\n                            <div class=\"btn-group\">\\\r\n                                <button class=\"btn\" ng-click=\"download()\" class=\"extra\"><span class=\"glyphicon glyphicon-picture\"></button>\\\r\n                                <button class=\"btn\" ng-click=\"fullScreen()\" class=\"extra\"><span class=\"glyphicon glyphicon-fullscreen\"></button>\\\r\n                            </div>\\\r\n                    </div>',\r\n            link: function (scope, element, attrs) {\r\n                scope.current = null;\r\n                var run = function (timestamp) {\r\n                    scope.startTime = scope.startTime || timestamp;\r\n                    scope.cmDemo({ t: timestamp - scope.startTimet });\r\n                    if (scope.running) requestAnimationFrame(run);\r\n                }\r\n                scope.$watch('running', function (newVal) {\r\n                    newVal && requestAnimationFrame(run);\r\n                });\r\n                scope.download = function () {\r\n                    var canvas = element.siblings('canvas')[0]; //This is a hack\r\n                    canvas.toBlob(function (blob) {\r\n                        saveAs(blob, attrs.filename || \"pretty image.png\");\r\n                    });\r\n                }\r\n                scope.fullScreen = function () {\r\n                    var canvas = element.siblings('canvas')[0]; //This is a hack\r\n                    scope.startSize = { width: canvas.width, height: canvas.height };\r\n                    if (canvas.requestFullscreen) {\r\n                        canvas.requestFullscreen();\r\n                    } else if (canvas.msRequestFullscreen) {\r\n                        canvas.msRequestFullscreen();\r\n                    } else if (canvas.mozRequestFullScreen) {\r\n                        canvas.mozRequestFullScreen();\r\n                    } else if (canvas.webkitRequestFullscreen) {\r\n                        canvas.webkitRequestFullscreen();\r\n                    }\r\n\r\n                    var events = ['webkitfullscreenchange', 'msfullscreenchange', 'mozfullscreenchange', 'fullscreenchange'];\r\n                    var checkFullSize = function () {\r\n                        if (!(document.mozFullScreenElement || document.webkitFullScreenElement || document.msFullScreenElement || document.fullScreenElement)) {\r\n                            console.log('unsize')\r\n                            canvas.width = scope.startSize.width;\r\n                            canvas.height = scope.startSize.height;\r\n                        }\r\n                        jQuery.each(events, function (i, v) {\r\n                            document.removeEventListener(v, checkFullSize);\r\n                        });\r\n                    };\r\n\r\n                    jQuery.each(events, function (i, v) {\r\n                        document.addEventListener(v, checkFullSize);\r\n                    });\r\n\r\n                    canvas.width = window.screen.width;\r\n                    canvas.height = window.screen.height;\r\n                }\r\n            }\r\n        };\r\n    })\r\n    .directive('drawTrace', function () {\r\n        return {\r\n            scope: {\r\n                drawTrace: '='\r\n            },\r\n            controller: ['$scope', '$element', function ($scope, $element) {\r\n                $scope.$watch(\"drawTrace.t\", function () {\r\n                    if (!$scope.draw || !$scope.drawTrace)\r\n                        return;\r\n\r\n                    $scope.draw($scope.drawTrace.trace, $element[0].getContext('2d'));\r\n                });\r\n\r\n                $scope.draw = function (v, ctx) {\r\n                    var h = ctx.canvas.height, w = ctx.canvas.width;\r\n                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n                    ctx.strokeStyle = 'hsla(0, 50%, 50%, 0.05)';\r\n\r\n                    ctx.beginPath();\r\n                    ctx.moveTo((v[v.length - 1][0] + 60) * 5, (v[v.length - 1][1] + 60) * 5);\r\n                    for (var i = v.length; i--;) {\r\n                        var p = v[i];\r\n                        if (i == 60000) { ctx.stroke(); ctx.beginPath(); ctx.strokeStyle = 'hsla(240, 80%, 50%, 0.05)'; }\r\n                        ctx.lineTo((p[0] + 60) * 5, (p[1] + 60) * 5);\r\n                    }\r\n                    ctx.stroke();\r\n                }\r\n            }]\r\n        }\r\n    })\r\n    .controller('windCtrl', [ '$scope', function ($scope) {\r\n        $scope.advance = function (t) {\r\n            $scope.$apply(function () {\r\n                $scope.state.t += 0.01;\r\n            });\r\n        }\r\n    }]);\r\n})();","var functionPathBuilder = function (func, extraScope) {\r\n    var scope = angular.extend({\r\n        f: '=',\r\n        t: '=',\r\n        values: '=',\r\n        paths: '=',\r\n        model: '='\r\n    }, extraScope); \r\n    return {\r\n        restrict: 'A',\r\n        scope: scope,\r\n        controller: ['$scope', '$attrs', function ($scope, $attrs) {\r\n            $scope.$watch('t', function () { func($scope, $attrs); });\r\n            $scope.$watch('f', function () { func($scope, $attrs); });\r\n            $scope.$watch('values', function () { func($scope, $attrs); }, true);\r\n        }]\r\n    };\r\n};\r\n\r\n\r\nangular\r\n    .module('paramApp', ['ui.bootstrap-slider'])\r\n    .directive('parameters', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                parameters: '=',\r\n                values: '='\r\n            },\r\n            template: '<ul class=\"ctrl-parameters\"><li ng-repeat=\"p in values\"><span ng-bind=\"p.name\"></span><div slider max=\"{{p.max}}\" min=\"{{p.min}}\" step=\"{{p.step}}\" ng-model=\"p.value\"></div></li></ul>',\r\n            controller: ['$scope', function ($scope) {\r\n                $scope.setValues = function () {\r\n                    var values = [];\r\n                    jQuery.each($scope.parameters, function (key, value) {\r\n                        values.push({ name: key, value: value[0] || 0, min: value[1] || -1, max: value[2] || 1, step: value[3] || 0.05 });\r\n                    });\r\n                    return $scope.values = values;\r\n                }\r\n                $scope.setValues();\r\n            }]\r\n        }\r\n    })\r\n    .directive('pathRender', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                pathRender: '=',\r\n                lineStyle: '=',\r\n                lineWidth: '=',\r\n                backgroundStyle: '=',\r\n                range: '=' // [minX, maxX, minY, maxY]\r\n            },\r\n            controller: ['$scope', '$element', function ($scope, $element) {\r\n                var c = $element[0];\r\n                var ctx = c.getContext('2d');\r\n                var range = $scope.range || [-1, 1, -1, 1];\r\n                var backingStore = ctx.backingStorePixelRatio ||\r\n                    ctx.webkitBackingStorePixelRatio ||\r\n                    ctx.mozBackingStorePixelRatio ||\r\n                    ctx.msBackingStorePixelRatio ||\r\n                    ctx.oBackingStorePixelRatio ||\r\n                    ctx.backingStorePixelRatio || 1;\r\n\r\n                var ratio = (window.devicePixelRatio || 1) / backingStore;\r\n                var sx = c.width / (range[1] - range[0])/ratio, dx = range[0];\r\n                var sy = c.height / (range[3] - range[2])/ratio, dy = range[2];\r\n                ctx.lineWidth = $scope.lineWidth || 2.0;\r\n\r\n                ctx.fillStyle = $scope.backgroundStyle || 'rgba(30, 30, 180, 0.025)';\r\n                for(var i=20; i--; ) ctx.fillRect(0, 0, c.width, c.height);\r\n\r\n                var drawPaths = function (paths) {\r\n                    ctx.lineWidth = 0.5;\r\n                    ctx.strokeStyle = $scope.lineStyle || 'rgba(255,255,255,1.0)';\r\n                    ctx.fillStyle = $scope.backgroundStyle || 'rgba(30, 30, 180, 0.025)';\r\n                    ctx.fillRect(0, 0, c.width, c.height);\r\n                    for (var pathIndex = paths.length; pathIndex--;) {\r\n                        var path = paths[pathIndex];\r\n                        ctx.beginPath();\r\n                        var cur = path[path.length - 1];\r\n                        ctx.moveTo((cur[0] - dx) * sx, (cur[1] - dy) * sy);\r\n                        for (var i = path.length; i--;) {\r\n                            var p = path[i];\r\n                            ctx.lineTo((p[0] - dx) * sx, (p[1] - dy) * sy);\r\n                        }\r\n                        ctx.stroke();\r\n                    }\r\n                };\r\n                $scope.$watch('pathRender', function (val) {\r\n                    if (val && val.length && val.length > 0) drawPaths(val);\r\n                });\r\n            }]\r\n        }\r\n    })\r\n    .directive('densityRender', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                densityRender: '='\r\n            },\r\n            controller: ['$scope', '$element', function ($scope, $element) {\r\n                var c = $element[0];\r\n                var ctx = c.getContext('2d');\r\n                var dx = c.width / 2;\r\n                var dy = c.height / 2;\r\n                var cc = {};\r\n                var fl = Math.floor;\r\n\r\n                var plot = function (functions) {\r\n                    ctx.fillStyle = 'rgba(0,0,0,1.0)';\r\n                    ctx.fillRect(0, 0, c.width, c.height);\r\n                    for (var fIndex = functions.length; fIndex--;) {\r\n                        var f = functions[fIndex];\r\n                        for (var x = c.width; x--;) {\r\n                            for (var y = c.height; y--;) {\r\n                                var val = fl(f(x - dx, y - dy) * 100);\r\n                                if (val < 0) {\r\n                                    ctx.fillStyle = cc[val] || (cc[val] = 'hsl(250,' + -val + '%,30%)');\r\n                                } else {\r\n                                    ctx.fillStyle = cc[val] || (cc[val] = 'hsl(50,' + val + '%,30%)');\r\n                                }\r\n                                ctx.fillRect(x, y, 1, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                $scope.$watch('densityRender', function (val) {\r\n                    if (val && val.length && val.length > 0) plot(val);\r\n                });\r\n            }]\r\n        }\r\n    })\r\n    .directive('graph', function () {\r\n        return functionPathBuilder(function ($scope, $attrs) {\r\n            try {\r\n                if (!$scope.f || !$scope.values) return;\r\n\r\n                var p = jQuery.map($scope.values, function (x) { return parseFloat(x.value); });\r\n                var params = jQuery.map($scope.values, function (x) { return x.name; });\r\n                var paths = [];\r\n\r\n                var ff = $scope.f;\r\n                if (!jQuery.isArray(ff)) ff = [ff];\r\n\r\n                for (var j = 0; j < ff.length; ++j) {\r\n                    var live_f = new Function(['t'].concat(params), 'return ' + ff[j] + ';');\r\n                    var path = [], pp = [-1].concat(p), pc = {};\r\n                    for (var x = -1; x < 1.02; x += 0.01) {\r\n                        pp[0] = x;\r\n                        path.push([x, live_f.apply(pc, pp)]);\r\n                    }\r\n                    paths.push(path);\r\n                }\r\n\r\n                $scope.paths = paths;\r\n            } catch (ex) {\r\n                //alert(ex);\r\n            }\r\n        });\r\n    })\r\n    .directive('parametric', function () {\r\n        return functionPathBuilder(function ($scope, $attrs) {\r\n            try {\r\n                if (!$scope.f || !$scope.values) return;\r\n\r\n                var p = jQuery.map($scope.values, function (x) { return parseFloat(x.value); });\r\n                var params = jQuery.map($scope.values, function (x) { return x.name; });\r\n                var paths = [];\r\n\r\n                var ff = $scope.f;\r\n                if (!jQuery.isArray(ff)) ff = [ff];\r\n\r\n                for (var j = 0; j < ff.length; ++j) {\r\n                    var live_f = new Function(['t'].concat(params), 'return ' + ff[j] + ';');\r\n                    var path = [], pp = [0].concat(p), pc = {};\r\n                    for (var t = -180; t < 180; ++t) {\r\n                        pp[0] = t / 15;\r\n                        var r = live_f.apply(pc, pp);\r\n                        path.push([r[0], r[1]]);\r\n                    }\r\n                    paths.push(path);\r\n                }\r\n\r\n                $scope.paths = paths;\r\n            } catch (ex) {\r\n                //alert(ex);\r\n            }\r\n        });\r\n    })\r\n    .directive('density', function () {\r\n        return functionPathBuilder(function ($scope, $attrs) {\r\n            try {\r\n                if (!$scope.f || !$scope.values) return;\r\n\r\n                var p = jQuery.map($scope.values, function (x) { return x.name + '=' + x.value; });\r\n                var params = jQuery.map($scope.values, function (x) { return x.name; });\r\n                var functions = [];\r\n\r\n                var ff = $scope.f;\r\n                if (!jQuery.isArray(ff)) ff = [ff];\r\n\r\n                for (var j = 0; j < ff.length; ++j) {\r\n                    var body = 'var ' + p + ';return ' + ff[j] + ';';\r\n                    var live_f = new Function(['x', 'y'].concat(params), body);\r\n                    functions.push(live_f);\r\n                }\r\n\r\n                $scope.paths = functions;\r\n            } catch (ex) {\r\n                //alert(ex);\r\n            }\r\n        });\r\n    })\r\n    .directive('wind', function () {\r\n        return functionPathBuilder(function ($scope, $attrs) {\r\n            try {\r\n                if (!$scope.f || !$scope.values) return;\r\n\r\n                var model = $scope.model || {};\r\n                var params = jQuery.map($scope.values, function (x) { return x.name; });\r\n                var functions = [];\r\n\r\n                var range = $scope.range || [-1, 1, -1, 1];\r\n                var sx = range[1] - range[0], dx = range[0];\r\n                var sy = range[3] - range[2], dy = range[2];\r\n\r\n                var ff = $scope.f;\r\n                if (!jQuery.isArray(ff)) ff = [ff];\r\n                var vars = [{name: 'x', value: 'v[0]'}, {name: 'y', value: 'v[1]'}, {name: 'z', value: 'v[2]'}].concat($scope.values);\r\n                var p = jQuery.map(vars, function (x) { return x.name + '=' + x.value; });\r\n\r\n                var body = 'var ' + p + '; return [' + ff[0] + '];';\r\n                model.live_f = new Function(['v'], body);\r\n\r\n                var traces = ($scope.model && $scope.model.traces) || [];\r\n                var t = $scope.t;\r\n                var count = $scope.count || 3000;\r\n                for (var j = count; j--;) {\r\n                    var trace0 = traces[j]\r\n                    if (!trace0 || Math.random() < 0.003) {\r\n                        var p = [sx * Math.random() + dx, sy * Math.random() + dy, t];\r\n                        var trace = makeTrace(model, p, 0.01).move(2);\r\n                        traces[j] = trace;\r\n                    } else {\r\n                        trace0.move(1);\r\n                    }\r\n                }\r\n                $scope.model = model;\r\n                $scope.model.traces = traces;\r\n                $scope.paths = traces.map(function (t) { return t.trace; });\r\n            } catch (ex) {\r\n                console.log(ex);\r\n            }\r\n        }, {\r\n            range: '=',\r\n            count: '='\r\n        });\r\n    })\r\n        .directive('wind2', function () {\r\n            return functionPathBuilder(function ($scope, $attrs) {\r\n//                try {\r\n                    if (!$scope.f || !$scope.values) return;\r\n\r\n                    var model = $scope.model || {};\r\n                    var params = jQuery.map($scope.values, function (x) { return x.name; });\r\n                    var functions = [];\r\n\r\n                    var range = $scope.range || [-1, 1, -1, 1];\r\n                    var sx = range[1] - range[0], dx = range[0];\r\n                    var sy = range[3] - range[2], dy = range[2];\r\n\r\n                    var ff = $scope.f;\r\n                    if (!jQuery.isArray(ff)) ff = [ff];\r\n                    var vars = [{name: 'x', value: 'v[0]'}, {name: 'y', value: 'v[1]'}, {name: 'vx', value: 'v[2]'}, {name: 'vy', value: 'v[3]'}, {name: 't', value: 'v[4]'}]\r\n                                        .concat($scope.values);\r\n                    var p = jQuery.map(vars, function (x) { return x.name + '=' + x.value; });\r\n\r\n                    var body = 'var ' + p + '; return [' + ff[0] + '];';\r\n                    model.live_f = new Function(['v'], body);\r\n\r\n                    var traces = ($scope.model && $scope.model.traces) || [];\r\n                    var t = $scope.t;\r\n                    var count = $scope.count || 1000;\r\n                    for (var j = count; j--;) {\r\n                        var trace0 = traces[j]\r\n                        if (!trace0 || Math.random() < 0.01) {\r\n                            var p = [sx * Math.random() + dx, sy * Math.random() + dy, 1, 0, t];\r\n                            var trace = makeTrace(model, p, 0.01).move(2);\r\n                            traces[j] = trace;\r\n                        } else {\r\n                            trace0.move(1);\r\n                        }\r\n                    }\r\n                    $scope.model = model;\r\n                    $scope.model.traces = traces;\r\n                    $scope.paths = traces.map(function (t) { return t.trace; });\r\n//                } catch (ex) {\r\n//                    console.log(ex);\r\n//                }\r\n            }, {\r\n                range: '=',\r\n                count: '='\r\n            });\r\n        }).controller(\"null\", function () { });","//differential solvers.\r\n\r\nArray.prototype.scale = function (s) {\r\n    for (var i = this.length; i--;) {\r\n        this[i] = this[i] * s;\r\n    }\r\n    return this;\r\n}\r\n\r\nArray.prototype.add = function (v) {\r\n    for (var i = this.length; i--; ) {\r\n        this[i] = this[i] + v[i];\r\n    }\r\n    return this;\r\n}\r\n\r\nArray.prototype.as = function(s, dt) {\r\n    for(var i = this.length; i--; ) {\r\n        this[i] = this[i] + dt * s[i];\r\n    }\r\n    return this;\r\n}\r\n\r\nArray.prototype.step = function (f, dt) {\r\n    return this.as(f(this), dt);\r\n}\r\n\r\nArray.prototype.step2 = function (f, dt) {\r\n    var temp = this.slice(0).step(f, dt/2);\r\n    return this.add(f(temp).scale(dt));\r\n}\r\n\r\nArray.prototype.rk4 = function (f, dt) {\r\n    var m1 = f(this);\r\n    var m2 = f(this.slice(0).as(m1, dt / 2));\r\n    var m3 = f(this.slice(0).as(m2, dt / 2));\r\n    var m4 = f(this.slice(0).as(m3, dt));\r\n    return this.slice(0).add(m1.as(m2, 2).as(m3, 2).add(m4).scale(dt / 6));\r\n}\r\n\r\nArray.prototype.predCor = function (f, dt, h) {\r\n}","var makeTrace = function (f, p, dt) {\r\n    //generates a trace of a multidimensional first order differential equation using the runga-kutta method.\r\n    //f - the differential equation\r\n    //p - the initial position of the trace\r\n    //dt - the step size of the approximation.\r\n    return {\r\n        trace: [],\r\n        p: p,\r\n        f: f,\r\n        dt: dt,\r\n        t: 0,\r\n        //Advance n steps, maintaining a constant array length.\r\n        move: function (n) {\r\n            var trace = n < this.trace.length ? this.trace.slice(n) : [],\r\n                p = this.p,\r\n                f1 = this.f.live_f || this.f;\r\n                f = f1.bind(this),\r\n                dt = this.dt;\r\n            this.t += this.dt;\r\n            for (var i = n; i--;) {\r\n                trace.push(p);\r\n                p = p.rk4(f, dt);\r\n                p = p.rk4(f, dt);\r\n                p = p.rk4(f, dt);\r\n            }\r\n            this.p = p;\r\n            this.trace = trace;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nvar makeLorenz = function (a, r, b) {\r\n    return function (p) {\r\n        var x = p[0], y = p[1], z = p[2];\r\n        return [\r\n                a * (y - x),\r\n                x * (r - z) - y,\r\n                x * y - b * z\r\n        ];\r\n    }\r\n};\r\n"],"sourceRoot":"/source/"}